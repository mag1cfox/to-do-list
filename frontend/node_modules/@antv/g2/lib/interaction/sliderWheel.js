"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SliderWheel = void 0;
const g_1 = require("@antv/g");
const coordinate_1 = require("../utils/coordinate");
const sliderFilter_1 = require("./sliderFilter");
const utils_1 = require("./utils");
function SliderWheel({ className = sliderFilter_1.SLIDER_CLASS_NAME, setValue = (component, values) => component.setValues(values), minRange = 0.01, wheelSensitivity = 0.05, x = true, y = true, } = {}) {
    return (context) => {
        const { container, view } = context;
        const { coordinate } = view;
        const transposed = (0, coordinate_1.isTranspose)(coordinate);
        const safeMinRange = Math.max(0.000001, Math.min(1, minRange));
        const sliders = container.getElementsByClassName(className);
        if (!sliders.length)
            return () => { };
        const isModifierKeyActive = (config, event) => {
            if (config === true)
                return true;
            if (config === false)
                return false;
            if (config === 'shift')
                return event.shiftKey && !event.ctrlKey && !event.altKey;
            if (config === 'ctrl')
                return event.ctrlKey && !event.shiftKey && !event.altKey;
            if (config === 'alt')
                return event.altKey && !event.shiftKey && !event.ctrlKey;
            return false;
        };
        const triggerSliderValueChange = (slider, values) => {
            setValue(slider, values);
            slider.dispatchEvent(new g_1.CustomEvent('valuechange', {
                detail: { value: values },
                nativeEvent: true,
            }));
        };
        const handleWheel = (event) => {
            event.preventDefault();
            event.stopPropagation();
            for (const slider of sliders) {
                const { values, orientation } = slider.attributes;
                if (!values)
                    continue;
                const isHorizontal = orientation === 'horizontal';
                const actualAxis = transposed
                    ? isHorizontal
                        ? 'y'
                        : 'x'
                    : isHorizontal
                        ? 'x'
                        : 'y';
                const axisConfig = actualAxis === 'x' ? x : y;
                if (!isModifierKeyActive(axisConfig, event))
                    continue;
                const [v0, v1] = values;
                const range = v1 - v0;
                const center = (v0 + v1) / 2;
                const adaptiveSensitivity = wheelSensitivity * (0, utils_1.calculateSensitivityMultiplier)(range);
                const delta = event.deltaY * adaptiveSensitivity;
                const zoomFactor = 1 + delta;
                const newRange = Math.max(safeMinRange, Math.min(1, range * zoomFactor));
                const halfRange = newRange / 2;
                let newV0 = center - halfRange;
                let newV1 = center + halfRange;
                if (newV0 < 0) {
                    newV0 = 0;
                    newV1 = Math.min(1, newRange);
                }
                else if (newV1 > 1) {
                    newV1 = 1;
                    newV0 = Math.max(0, 1 - newRange);
                }
                triggerSliderValueChange(slider, [newV0, newV1]);
            }
        };
        container.addEventListener('wheel', handleWheel, { passive: false });
        return () => {
            container.removeEventListener('wheel', handleWheel);
        };
    };
}
exports.SliderWheel = SliderWheel;
SliderWheel.props = {
    reapplyWhenUpdate: true,
};
//# sourceMappingURL=sliderWheel.js.map